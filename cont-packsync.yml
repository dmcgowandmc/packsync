#Continuing from init-packsync.yml once file changes have been detected. Create and upload new package to s3 and distribute new package to other hosts
#All of these tasks will be run locally
- hosts: localwebstack
  vars:
    region: ap-southeast-2
  tasks:
  - name: "Change Found - Extract for new Package" #Facing issues with archive utility excluding directories so using shell commands to perform the archiving tasks
    command: "rsync -av --progress /opt/wordpress/ {{ playbook_dir }}/{{ mywordpresssite_db_wp_name }} --exclude uploads --exclude cache"
  - name: "Change Found - Upload Package to S3" #Ansible S3 module is spitting a 403 error dispite a successful upload. Possible permission issue but can't find an acceptable resolution without granting excessive access. Sticking to aws cli for now
    command: "aws s3 sync {{ playbook_dir }}/{{ mywordpresssite_db_wp_name }} s3://{{ mywordpresssite_s3_utilities }}/resources/{{ mywordpresssite_db_wp_name }} --sse"
    ignore_errors: true #WARNING : This version of awscli seems to be throwing errors on come file uploads however they appear to be getting uploaded correctly. Ignoring errors for now
  - name: "Change Found - Get this instance ID"
    command: "curl http://169.254.169.254/latest/meta-data/instance-id/"
    register: instance_id
  - name: "Change Found - Get Stack Tag Name from This Instance ID"
    ec2_remote_facts:
      region: "{{ region }}"
      filters:
        instance-id: "{{ instance_id.stdout }}"
    register: instance_stats
  - name: "Change Found - Get Other Instances" #Really should be filtering out this instance. Will look at a later date
    ec2_remote_facts:
      region: "{{ region }}"
      filters:
        "tag:Name": "{{ instance_stats.instances[0].tags.Name }}" #mywordpresssite-asg-webstack #need to somehow provide this dynamically
        "instance-state-name": "running"
    register: wordpress_stack
  - name: "Change Found - Add Other Instances to Inventory"
    add_host:
      name: "{{ item.private_dns_name }}"
      group: "otherwebstack"
    with_items: "{{ wordpress_stack.instances }}"
#All of these tasks will be run remotely on any hosts in the stack
- hosts: otherwebstack
  vars:
    region: ap-southeast-2
  tasks:
  - name: Lets Ping
    ping:
  - name: "Wordpress Config - Download Local Wordpress" #Difficulty getting recursive to work on a folder with the s3 module so using aws cli for now
    command: "aws s3 cp s3://{{ mywordpresssite_s3_utilities }}/resources/{{ mywordpresssite_db_wp_name }}/ /opt/wordpress --recursive"
  - name: "Wordpress Config - Set Permission" #NOTE: THIS COMMAND IS REQUIRED DUE TO LIMITATION MENTIONED ABOVE
    command: "chown -R www-data:www-data /opt/wordpress"
